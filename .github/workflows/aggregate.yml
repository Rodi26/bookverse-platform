name: Aggregate

on:
  # NOTE: For real environments, enable this schedule to run every second Monday at 09:00 UTC:
  # schedule:
  #   - cron: '0 9 */14 * 1'
  workflow_dispatch:
    inputs:
      create:
        description: "Create platform version and write manifest"
        required: false
        default: true
        type: boolean
      preview:
        description: "Preview only (no writes)"
        required: false
        default: false
        type: boolean
      inventory_version:
        description: "Force inventory version (optional)"
        required: false
        type: string
      recommendations_version:
        description: "Force recommendations version (optional)"
        required: false
        type: string
      checkout_version:
        description: "Force checkout version (optional)"
        required: false
        type: string
      web_version:
        description: "Force web version (optional)"
        required: false
        type: string

jobs:
  aggregate:
    name: Aggregate
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      # Prefer canonical JFrog variables used across the repo
      JFROG_URL: ${{ vars.JFROG_URL }}
      JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Setup] Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # AppTrust base URL is derived from JFROG_URL; admin token used for API calls
      - name: "[Setup] AppTrust context"
        run: |
          BASE="${JFROG_URL%/}"
          echo "APPTRUST_BASE_URL=${BASE}/apptrust/api/v1" >> "$GITHUB_ENV"
          echo "APPTRUST_ACCESS_TOKEN=${JFROG_ADMIN_TOKEN}" >> "$GITHUB_ENV"

      - name: "[Run] Preview aggregator"
        if: ${{ inputs.preview == true }}
        run: |
          set -euo pipefail
          ARGS="--config config/services.yaml --output-dir manifests --source-stage PROD --preview"
          if [[ -n "${{ inputs.inventory_version }}" ]]; then ARGS="$ARGS --override inventory=${{ inputs.inventory_version }}"; fi
          if [[ -n "${{ inputs.recommendations_version }}" ]]; then ARGS="$ARGS --override recommendations=${{ inputs.recommendations_version }}"; fi
          if [[ -n "${{ inputs.checkout_version }}" ]]; then ARGS="$ARGS --override checkout=${{ inputs.checkout_version }}"; fi
          if [[ -n "${{ inputs.web_version }}" ]]; then ARGS="$ARGS --override web=${{ inputs.web_version }}"; fi
          python -m app.main $ARGS

      - name: "[Release] Create version and write manifest"
        if: ${{ inputs.preview != true && inputs.create == true }}
        run: |
          set -euo pipefail
          ARGS="--config config/services.yaml --output-dir manifests --source-stage PROD"
          if [[ -n "${{ inputs.inventory_version }}" ]]; then ARGS="$ARGS --override inventory=${{ inputs.inventory_version }}"; fi
          if [[ -n "${{ inputs.recommendations_version }}" ]]; then ARGS="$ARGS --override recommendations=${{ inputs.recommendations_version }}"; fi
          if [[ -n "${{ inputs.checkout_version }}" ]]; then ARGS="$ARGS --override checkout=${{ inputs.checkout_version }}"; fi
          if [[ -n "${{ inputs.web_version }}" ]]; then ARGS="$ARGS --override web=${{ inputs.web_version }}"; fi
          python -m app.main $ARGS

