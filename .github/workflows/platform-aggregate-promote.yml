name: Platform Aggregate & Promote

concurrency:
  group: platform-aggregate-promote
  cancel-in-progress: false

on:
  schedule:
    - cron: '0 9 */14 * 1'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual platform aggregation'
        required: false
        default: 'Manual hotfix or testing'
        type: string
      create_version:
        description: "Create platform application version"
        required: false
        default: true
        type: boolean
      auto_promote:
        description: "Automatically promote through all stages to PROD"
        required: false
        default: true
        type: boolean
      preview_only:
        description: "Preview only (no writes)"
        required: false
        default: false
        type: boolean
      inventory_version:
        description: "Force inventory version (optional)"
        required: false
        type: string
      recommendations_version:
        description: "Force recommendations version (optional)"
        required: false
        type: string
      checkout_version:
        description: "Force checkout version (optional)"
        required: false
        type: string
      web_version:
        description: "Force web version (optional)"
        required: false
        type: string

jobs:
  aggregate:
    name: "Platform Aggregation"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      platform_version: ${{ steps.create-version.outputs.platform_version }}
      manifest_created: ${{ steps.create-version.outputs.manifest_created }}
    defaults:
      run:
        shell: bash
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Checkout bookverse-infra for shared scripts"
        uses: actions/checkout@v4
        with:
          repository: 'yonatanp-jfrog/bookverse-infra'
          ref: 'main'
          path: 'bookverse-infra'

      - name: "[Setup] Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Auth] OIDC Token Exchange (bookverse-devops shared script)"
        id: exchange-oidc
        run: |
          echo "üîê Using bookverse-devops shared OIDC exchange script"
          bookverse-infra/libraries/bookverse-devops/scripts/enhanced-oidc-auth.sh \
            --service-name "platform" \
            --provider-name "bookverse-platform-github" \
            --jfrog-url "${{ vars.JFROG_URL }}" \
            --verbose
          echo "‚úÖ OIDC token exchange completed using shared bookverse-devops script"

      - name: "[Setup] Install Python dependencies"
        run: |
          pip install --user PyYAML setuptools wheel
          echo "‚úÖ Python dependencies installed"

      - name: "[Run] Create version and write manifest"
        id: collect-versions
        env:
          JFROG_URL: "${{ vars.JFROG_URL }}"
          JF_OIDC_TOKEN: "${{ steps.exchange-oidc.outputs.token }}"
        run: |
          set -euo pipefail
          ARGS="--config config/services.yaml --output-dir manifests --source-stage PROD"
          if [[ -n "${{ inputs.inventory_version }}" ]]; then ARGS="$ARGS --override inventory=${{ inputs.inventory_version }}"; fi
          if [[ -n "${{ inputs.recommendations_version }}" ]]; then ARGS="$ARGS --override recommendations=${{ inputs.recommendations_version }}"; fi
          if [[ -n "${{ inputs.checkout_version }}" ]]; then ARGS="$ARGS --override checkout=${{ inputs.checkout_version }}"; fi
          if [[ -n "${{ inputs.web_version }}" ]]; then ARGS="$ARGS --override web=${{ inputs.web_version }}"; fi
          python -m app.main $ARGS | tee release_output.txt

      - name: "[Extract] Platform version from output"
        id: create-version
        if: ${{ inputs.create_version != false && inputs.preview_only != true }}
        run: |
          set -euo pipefail
          PLATFORM_VERSION=$(grep -o '"platform_app_version": "[^"]*"' release_output.txt | sed 's/"platform_app_version": "//; s/"//' | head -1)
          if [[ -z "$PLATFORM_VERSION" ]]; then
            echo "‚ùå Could not extract platform version from output"
            exit 1
          fi
          echo "platform_version=$PLATFORM_VERSION" >> $GITHUB_OUTPUT
          echo "manifest_created=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Platform application version created: $PLATFORM_VERSION"


      - name: "[Summary] Aggregation"
        run: |
          echo "## üèóÔ∏è Platform Aggregation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platform Version:** \`${{ steps.create-version.outputs.platform_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** \`${{ github.workflow }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Details" >> $GITHUB_STEP_SUMMARY
          echo "- Platform aggregation completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Service versions collected from PROD stage" >> $GITHUB_STEP_SUMMARY
          echo "- Platform manifest generated" >> $GITHUB_STEP_SUMMARY

  promote:
    name: "Auto-Promote Platform"
    needs: aggregate
    if: ${{ needs.aggregate.outputs.manifest_created == 'true' && inputs.auto_promote != false && inputs.preview_only != true }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    env:
      JFROG_URL: ${{ vars.JFROG_URL }}
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Checkout bookverse-infra for shared promotion library"
        uses: actions/checkout@v4
        with:
          repository: 'yonatanp-jfrog/bookverse-infra'
          ref: 'main'
          path: 'bookverse-infra'

      - name: "[Auth] OIDC Token Exchange (bookverse-devops shared script)"
        id: exchange-oidc
        run: |
          echo "üîê Using bookverse-devops shared OIDC exchange script"
          bookverse-infra/libraries/bookverse-devops/scripts/enhanced-oidc-auth.sh \
            --service-name "platform" \
            --provider-name "bookverse-platform-github" \
            --jfrog-url "${{ vars.JFROG_URL }}" \
            --verbose
          echo "‚úÖ OIDC token exchange completed using shared bookverse-devops script"

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Setup] Install Python dependencies"
        run: |
          pip install --user PyYAML setuptools wheel
          echo "‚úÖ Python dependencies installed"

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust

      - name: "[Setup] Configure JFrog CLI"
        run: |
          jf c add --interactive=false --url "${{ vars.JFROG_URL }}" --access-token ""
          echo "‚úÖ JFrog CLI configured"

      - name: "[Setup] Promotion Environment"
        env:
          APPLICATION_KEY: "bookverse-platform"
          APP_VERSION: "${{ needs.aggregate.outputs.platform_version }}"
          JFROG_URL: "${{ vars.JFROG_URL }}"
          PROJECT_KEY: "${{ vars.PROJECT_KEY }}"
          JF_OIDC_TOKEN: "${{ steps.exchange-oidc.outputs.token }}"
          STAGES_STR: "DEV QA STAGING"
          FINAL_STAGE: "STAGING"
          ALLOW_RELEASE: "false"
        run: |
          echo "üöÄ Initializing platform promotion environment..."
          echo "üìã Platform Version: ${{ needs.aggregate.outputs.platform_version }}"
          echo "üéØ Target: DEV ‚Üí QA ‚Üí STAGING (PROD handled by separate workflow)"
          
          source bookverse-infra/libraries/bookverse-devops/scripts/evidence-lib.sh
          setup_promotion_environment
          
          echo "‚úÖ Promotion environment initialized"

      - name: "[Promote & Evidence] DEV Stage"
        env:
          APPLICATION_KEY: "bookverse-platform"
          APP_VERSION: "${{ needs.aggregate.outputs.platform_version }}"
          JFROG_URL: "${{ vars.JFROG_URL }}"
          PROJECT_KEY: "${{ vars.PROJECT_KEY }}"
          JF_OIDC_TOKEN: "${{ steps.exchange-oidc.outputs.token }}"
          STAGES_STR: "DEV QA STAGING"
          FINAL_STAGE: "STAGING"
          ALLOW_RELEASE: "false"
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          echo "üß™ Promoting platform to DEV stage with evidence collection"
          echo "üìã Platform Version: $APP_VERSION"
          echo "üéØ Target Stage: DEV (development environment for platform testing)"
          echo "üõ°Ô∏è Evidence Type: Platform aggregation validation and smoke tests"
          
          if [[ -z "${JF_OIDC_TOKEN:-}" ]]; then
            echo "‚ùå Missing JF_OIDC_TOKEN. Ensure OIDC exchange step succeeded." >&2
            exit 1
          fi
          echo "‚úÖ Using JF_OIDC_TOKEN for DEV promotion"
          
          source bookverse-infra/libraries/bookverse-devops/scripts/evidence-lib.sh
          setup_promotion_environment
          
          if advance_one_step; then
            echo "‚úÖ Successfully promoted platform to DEV"
          else
            echo "‚ùå Failed to promote platform to DEV"
            exit 1
          fi
          
          # Attach platform-specific DEV evidence
          export APPLICATION_KEY="bookverse-platform"
          export APP_VERSION="${{ needs.aggregate.outputs.platform_version }}"
          attach_application_dev_evidence
          echo "‚úÖ DEV stage evidence attached via shared library: platform-smoke-tests"

      - name: "[Promote & Evidence] QA Stage"
        env:
          APPLICATION_KEY: "bookverse-platform"
          APP_VERSION: "${{ needs.aggregate.outputs.platform_version }}"
          JFROG_URL: "${{ vars.JFROG_URL }}"
          PROJECT_KEY: "${{ vars.PROJECT_KEY }}"
          JF_OIDC_TOKEN: "${{ steps.exchange-oidc.outputs.token }}"
          STAGES_STR: "DEV QA STAGING"
          FINAL_STAGE: "STAGING"
          ALLOW_RELEASE: "false"
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          echo "üîç Promoting platform to QA stage with evidence collection"
          echo "üìã Platform Version: $APP_VERSION"
          echo "üéØ Target Stage: QA (quality assurance for platform integration)"
          echo "üõ°Ô∏è Evidence Type: Platform integration tests and service compatibility validation"
          
          if [[ -z "${JF_OIDC_TOKEN:-}" ]]; then
            echo "‚ùå Missing JF_OIDC_TOKEN. Ensure OIDC exchange step succeeded." >&2
            exit 1
          fi
          echo "‚úÖ Using JF_OIDC_TOKEN for QA promotion"
          
          source bookverse-infra/libraries/bookverse-devops/scripts/evidence-lib.sh
          setup_promotion_environment
          
          if advance_one_step; then
            echo "‚úÖ Successfully promoted platform to QA"
          else
            echo "‚ùå Failed to promote platform to QA"
            exit 1
          fi
          
          # Attach platform-specific QA evidence
          export APPLICATION_KEY="bookverse-platform"
          export APP_VERSION="${{ needs.aggregate.outputs.platform_version }}"
          attach_application_qa_evidence
          echo "‚úÖ QA stage evidence attached via shared library: platform-integration-tests, service-compatibility-scan"

      - name: "[Promote & Evidence] STAGING Stage"
        env:
          APPLICATION_KEY: "bookverse-platform"
          APP_VERSION: "${{ needs.aggregate.outputs.platform_version }}"
          JFROG_URL: "${{ vars.JFROG_URL }}"
          PROJECT_KEY: "${{ vars.PROJECT_KEY }}"
          JF_OIDC_TOKEN: "${{ steps.exchange-oidc.outputs.token }}"
          STAGES_STR: "DEV QA STAGING"
          FINAL_STAGE: "STAGING"
          ALLOW_RELEASE: "false"
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          echo "üèóÔ∏è Promoting platform to STAGING stage with evidence collection"
          echo "üìã Platform Version: $APP_VERSION"
          echo "üéØ Target Stage: STAGING (pre-production platform validation)"
          echo "üõ°Ô∏è Evidence Type: Platform performance tests and production readiness validation"
          
          if [[ -z "${JF_OIDC_TOKEN:-}" ]]; then
            echo "‚ùå Missing JF_OIDC_TOKEN. Ensure OIDC exchange step succeeded." >&2
            exit 1
          fi
          echo "‚úÖ Using JF_OIDC_TOKEN for STAGING promotion"
          
          source bookverse-infra/libraries/bookverse-devops/scripts/evidence-lib.sh
          setup_promotion_environment
          
          if advance_one_step; then
            echo "‚úÖ Successfully promoted platform to STAGING"
          else
            echo "‚ùå Failed to promote platform to STAGING"
            exit 1
          fi
          
          # Attach platform-specific STAGING evidence
          export APPLICATION_KEY="bookverse-platform"
          export APP_VERSION="${{ needs.aggregate.outputs.platform_version }}"
          attach_application_staging_evidence
          echo "‚úÖ STAGING stage evidence attached via shared library: platform-performance-test, production-readiness-scan"
          echo "üéâ Platform version $APP_VERSION successfully promoted to STAGING with all evidence!"
          echo "üîÑ Use separate release workflow to promote to PROD when ready"

      - name: "üìä Enhanced Platform Summary (bookverse-devops pattern)"
        if: always()
        run: |
          echo "üìä Generating comprehensive platform aggregation and promotion summary for stakeholder visibility"
          echo "üéØ This summary provides complete aggregation status, service versions, and deployment readiness"
          
          echo "## üèóÔ∏è BookVerse Platform - Aggregation & Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Platform Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** platform (aggregation service)" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform Version:** \`${{ needs.aggregate.outputs.platform_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Type:** Aggregation & Auto-Promotion" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ‚úÖ AppTrust Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Job 1 (aggregate):** ‚úÖ Completed - Service versions collected and platform version created" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.aggregate.outputs.manifest_created }}" == "true" ]]; then
            echo "- **Job 2 (promote):** ‚úÖ Completed - Platform promoted through all stages to STAGING" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Job 2 (promote):** ‚è≠Ô∏è Skipped (preview mode or creation disabled)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîó Aggregated Service Versions" >> $GITHUB_STEP_SUMMARY
          echo "Platform aggregates the following service application versions from PROD stage:" >> $GITHUB_STEP_SUMMARY
          echo "- **üì¶ Inventory Service:** \`${{ inputs.inventory_version || 'Latest from PROD' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üéØ Recommendations Service:** \`${{ inputs.recommendations_version || 'Latest from PROD' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üí≥ Checkout Service:** \`${{ inputs.checkout_version || 'Latest from PROD' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üåê Web Service:** \`${{ inputs.web_version || 'Latest from PROD' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **üìã Platform Manifest:** ‚úÖ Generated with service dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **üîó Platform Application Version:** ‚úÖ Created in AppTrust with source links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.aggregate.outputs.manifest_created }}" == "true" ]]; then
            echo "### üéØ Promotion Path & Evidence" >> $GITHUB_STEP_SUMMARY
            echo "Platform follows step-by-step promotion with comprehensive evidence collection:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **UNASSIGNED ‚Üí DEV**: Platform aggregation validation and smoke tests" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **DEV ‚Üí QA**: Integration tests and service compatibility validation" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **QA ‚Üí STAGING**: Performance tests and production readiness validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### üõ°Ô∏è Evidence Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- **DEV Evidence:** platform-smoke-tests" >> $GITHUB_STEP_SUMMARY
            echo "- **QA Evidence:** platform-integration-tests, service-compatibility-scan" >> $GITHUB_STEP_SUMMARY
            echo "- **STAGING Evidence:** platform-performance-test, production-readiness-scan" >> $GITHUB_STEP_SUMMARY
            echo "- **Evidence Collection:** ‚úÖ Cryptographically signed and uploaded" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üöÄ Platform Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- **bookverse-devops:** ‚úÖ Shared OIDC authentication & promotion patterns" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Aggregation:** ‚úÖ Automated collection from PROD stage releases" >> $GITHUB_STEP_SUMMARY
          echo "- **Step-by-step Promotion:** ‚úÖ Individual stage promotion with evidence" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance Evidence:** ‚úÖ Comprehensive audit trail for each stage" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform-specific Logic:** ‚úÖ Custom aggregation without package versioning" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.aggregate.outputs.manifest_created }}" == "true" ]]; then
            echo "### üéØ Platform Deployment Status" >> $GITHUB_STEP_SUMMARY
            echo "Platform version **\`${{ needs.aggregate.outputs.platform_version }}\`** has been created and promoted to **STAGING**." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üîÑ Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Platform is ready for STAGING validation and testing" >> $GITHUB_STEP_SUMMARY
            echo "- Use separate **Release** workflow to promote to PROD when ready" >> $GITHUB_STEP_SUMMARY
            echo "- PROD promotion requires manual approval and additional compliance validation" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üìã Preview Mode" >> $GITHUB_STEP_SUMMARY
            echo "Platform aggregation ran in preview mode - no versions created or promoted." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üîÑ Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Run workflow with \`create_version=true\` to create platform application version" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure \`auto_promote=true\` to enable automatic promotion to STAGING" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Enhanced platform summary generated using bookverse-devops patterns" >> $GITHUB_STEP_SUMMARY
