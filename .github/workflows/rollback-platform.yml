# AppTrust rollback for platform version
name: Rollback

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to rollback (SemVer). Omit to use latest promoted"
        required: false
        type: string
      dry_run:
        description: "Dry run (no mutations)"
        required: false
        default: false
        type: boolean

jobs:
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      JFROG_URL: ${{ vars.JFROG_URL }}
      JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] AppTrust context"
        run: |
          BASE="${JFROG_URL%/}"
          echo "APPTRUST_BASE_URL=${BASE}/apptrust/api/v1" >> "$GITHUB_ENV"
          echo "APPTRUST_ACCESS_TOKEN=${JFROG_ADMIN_TOKEN}" >> "$GITHUB_ENV"

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Resolve] Target version"
        shell: bash
        run: |
          set -euo pipefail
          TARGET_VERSION="${{ github.event.inputs.version }}"
          if [ -z "${TARGET_VERSION}" ]; then
            APP_KEY="bookverse-platform"
            RESP_FILE=$(mktemp)
            HTTP_STATUS=$(curl -sS -o "$RESP_FILE" -w "%{http_code}" \
              "$APPTRUST_BASE_URL/applications/$APP_KEY/versions?limit=20&order_by=created&order_asc=false" \
              -H "Authorization: Bearer $APPTRUST_ACCESS_TOKEN" \
              -H "Accept: application/json")
            if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
              TARGET_VERSION=$(jq -r '.versions[] | select(.release_status == "RELEASED" or .release_status == "TRUSTED_RELEASE") | .version' "$RESP_FILE" | head -n1)
            fi
            rm -f "$RESP_FILE"
            if [ -z "${TARGET_VERSION:-}" ] || [ "$TARGET_VERSION" = "null" ]; then
              echo "Could not resolve latest promoted version for $APP_KEY" >&2
              exit 1
            fi
            echo "Resolved target version: $TARGET_VERSION"
          fi
          echo "TARGET_VERSION=$TARGET_VERSION" >> $GITHUB_ENV

      - name: "[Dry Run] Validate only"
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "DRY RUN: Would invoke rollback for version ${TARGET_VERSION}"

      - name: "[Rollback] Execute"
        if: ${{ inputs.dry_run != true }}
        working-directory: bookverse-platform
        run: |
          python scripts/apptrust_rollback.py --version "${TARGET_VERSION}" --base-url "$APPTRUST_BASE_URL" --token "$APPTRUST_ACCESS_TOKEN"

      - name: "[Tags] Enforce PROD 'latest' invariants"
        if: ${{ inputs.dry_run != true }}
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          APP_KEY="bookverse-platform"
          BASE="${{ vars.JFROG_URL }}/apptrust/api/v1"
          TOKEN='${{ secrets.JFROG_ADMIN_TOKEN }}'
          RESP=$(mktemp)
          code=$(curl -sS -L -o "$RESP" -w "%{http_code}" \
            "$BASE/applications/$APP_KEY/versions?limit=1000&order_by=created&order_asc=false" \
            -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" || echo 000)
          if [[ "$code" -lt 200 || "$code" -ge 300 ]]; then
            echo "❌ Failed to list versions (HTTP $code)" >&2; cat "$RESP" || true; exit 1
          fi
          DESIRED=$(jq -r '[.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version] | unique | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(split(".")|map(tonumber)) | last // empty' "$RESP")
          if [[ -n "$DESIRED" ]]; then
            CURR_TAG=$(jq -r --arg v "$DESIRED" '.versions[] | select(.version==$v) | (.tag // "")' "$RESP")
            jq -n --arg ct "$CURR_TAG" '{tag:"latest", properties:{original_tag_before_latest:[$ct]}}' > body.json
            curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$DESIRED" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          fi
          mapfile -t OTHERS < <(jq -r --arg v "$DESIRED" '.versions[] | select(.tag=="latest" and .version!=$v) | .version' "$RESP")
          for ov in "${OTHERS[@]:-}"; do
            [ -z "$ov" ] && continue
            restore=$(jq -r --arg v "$ov" '.versions[] | select(.version==$v) | (.properties.original_tag_before_latest[0] // .version // "")' "$RESP")
            printf '{"tag":"%s","delete_properties":["original_tag_before_latest"]}' "$restore" > body.json
            curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$ov" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          done
          rm -f "$RESP" body.json || true


