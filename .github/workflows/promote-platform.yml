name: Promote

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Platform application version (SemVer)"
        required: true
      target_stage:
        description: "Target stage (QA, STAGING, PROD)"
        required: true
        type: choice
        options: [ QA, STAGING, PROD ]

jobs:
  promote:
    name: Promote
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Promote] AppTrust"
        id: promote
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          python - << 'PY'
          import os, sys, json, urllib.request
          # Derive AppTrust from canonical JFrog URL, reusing admin token for demo
          base = (os.environ.get("JFROG_URL", "").rstrip('/') + "/apptrust/api/v1").rstrip('/')
          token = os.environ.get("JFROG_ADMIN_TOKEN", "")
          app = "bookverse-platform"
          version = os.environ["INPUT_VERSION"] if "INPUT_VERSION" in os.environ else "${{ github.event.inputs.version }}"
          target_stage = os.environ["INPUT_TARGET_STAGE"].upper() if "INPUT_TARGET_STAGE" in os.environ else "${{ github.event.inputs.target_stage }}".upper()
          if target_stage not in ("QA","STAGING","PROD"):
            print("Target stage must be QA, STAGING, or PROD", file=sys.stderr)
            sys.exit(2)
          req = urllib.request.Request(
            url=f"{base}/applications/{app}/versions/{version}/promote",
            data=json.dumps({"target_stage": target_stage}).encode('utf-8'),
            headers={"Authorization": f"Bearer {token}", "Content-Type": "application/json"},
            method="POST",
          )
          with urllib.request.urlopen(req, timeout=30) as resp:
            print(resp.read().decode('utf-8'))
          PY

      - name: "[Helm] Pin version (on PROD)"
        if: ${{ inputs.target_stage == 'PROD' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository_owner }}/bookverse-helm
          event-type: platform_release
          client-payload: '{"platform_version": "${{ github.event.inputs.version }}"}'

      - name: "[Summary] Promotion"
        if: always()
        run: |
          set -euo pipefail
          CURRENT_DISPLAY="${CURRENT_STAGE_BEFORE:-UNASSIGNED}"
          CURRENT_DISPLAY="${CURRENT_DISPLAY#bookverse-}"
          TARGET_DISPLAY="${{ inputs.target_stage }}"
          export CURRENT_DISPLAY TARGET_DISPLAY
          STAGES="DEV QA STAGING PROD"
          IFS=' ' read -r -a STAGE_ARR <<< "$STAGES"
          idx_current=-1; idx_target=-1
          for i in "${!STAGE_ARR[@]}"; do
            if [[ "${STAGE_ARR[$i]}" == "$CURRENT_DISPLAY" ]]; then idx_current=$i; fi
            if [[ "${STAGE_ARR[$i]}" == "$TARGET_DISPLAY" ]]; then idx_target=$i; fi
          done
          pre=""; post=""; sep=""
          if [[ $idx_current -ge 0 && $idx_target -ge 0 ]]; then
            for ((j=0;j<idx_current;j++)); do
              if [[ -n "$pre" ]]; then sep=" → "; else sep=""; fi
              pre+="$sep${STAGE_ARR[$j]}"
            done
            for ((j=idx_target+1;j<${#STAGE_ARR[@]};j++)); do
              if [[ -n "$post" ]]; then sep=" → "; else sep=""; fi
              post+="$sep${STAGE_ARR[$j]}"
            done
            LC_PATH="${pre:+$pre → }**${CURRENT_DISPLAY} ➔ ${TARGET_DISPLAY}**${post:+ → $post}"
          else
            LC_PATH="$STAGES"
          fi
          OUTCOME="SUCCESS"
          echo "### Executive Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Lifecycle:** UNASSIGNED → DEV → QA → STAGING → PROD" >> $GITHUB_STEP_SUMMARY
          echo "- **Application:** bookverse-platform" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **From → To:** ${CURRENT_DISPLAY} → ${TARGET_DISPLAY}" >> $GITHUB_STEP_SUMMARY
          echo "- **Outcome:** ✅ ${OUTCOME}" >> $GITHUB_STEP_SUMMARY

