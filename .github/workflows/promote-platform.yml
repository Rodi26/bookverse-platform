name: Promote

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Platform application version (SemVer). If empty, use latest."
        required: false
        type: string
      target_stage:
        description: "Target stage (bookverse-DEV, bookverse-QA, bookverse-STAGING)"
        required: true
        type: choice
        default: bookverse-STAGING
        options: [ bookverse-DEV, bookverse-QA, bookverse-STAGING ]

jobs:
  promote:
    name: Promote
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Promote] AppTrust"
        id: promote
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          python - << 'PY'
          import os, sys, json, urllib.request
          from urllib.error import HTTPError, URLError
          # Base API and auth
          base = (os.environ.get("JFROG_URL", "").rstrip('/') + "/apptrust/api/v1").rstrip('/')
          token = os.environ.get("JFROG_ADMIN_TOKEN", "")
          app = "bookverse-platform"
          # Resolve inputs
          input_version = os.environ.get("INPUT_VERSION", "${{ github.event.inputs.version }}").strip()
          target_stage = os.environ.get("INPUT_TARGET_STAGE", "${{ github.event.inputs.target_stage }}").strip()
          allowed = {"bookverse-DEV", "bookverse-QA", "bookverse-STAGING"}
          if target_stage not in allowed:
            print(f"Target stage must be one of {sorted(allowed)}", file=sys.stderr)
            sys.exit(2)
          # Determine version if not provided: latest by created desc
          version = input_version
          if not version:
            url = f"{base}/applications/{app}/versions?limit=1&order_by=created&order_asc=false"
            req = urllib.request.Request(url=url, headers={"Authorization": f"Bearer {token}", "Accept": "application/json"})
            try:
              with urllib.request.urlopen(req, timeout=30) as resp:
                data = json.loads(resp.read().decode("utf-8")) or {}
                version = str((data.get("versions") or [{}])[0].get("version") or "").strip()
            except Exception as e:
              print(f"Failed to resolve latest version: {e}", file=sys.stderr)
              sys.exit(1)
            if not version:
              print("Could not determine latest platform version", file=sys.stderr)
              sys.exit(1)
          # Export resolved version and current stage before promotion
          try:
            req = urllib.request.Request(url=f"{base}/applications/{app}/versions/{version}/content", headers={"Authorization": f"Bearer {token}", "Accept": "application/json"})
            with urllib.request.urlopen(req, timeout=30) as resp:
              content = json.loads(resp.read().decode("utf-8")) or {}
              current_stage = str(content.get("current_stage") or "")
          except Exception:
            current_stage = ""
          geh = os.environ.get("GITHUB_ENV")
          if geh:
            with open(geh, "a", encoding="utf-8") as f:
              f.write(f"RESOLVED_VERSION={version}\n")
              if current_stage:
                f.write(f"CURRENT_STAGE_BEFORE={current_stage}\n")
          # Perform promotion
          body = json.dumps({"target_stage": target_stage}).encode('utf-8')
          req = urllib.request.Request(
            url=f"{base}/applications/{app}/versions/{version}/promote",
            data=body,
            headers={"Authorization": f"Bearer {token}", "Content-Type": "application/json"},
            method="POST",
          )
          try:
            with urllib.request.urlopen(req, timeout=30) as resp:
              print(resp.read().decode('utf-8'))
          except HTTPError as e:
            print(e.read().decode('utf-8', errors='replace'), file=sys.stderr)
            raise
          PY

      - name: "[Summary] Promotion"
        if: always()
        run: |
          set -euo pipefail
          CURRENT_DISPLAY="${CURRENT_STAGE_BEFORE:-UNASSIGNED}"
          CURRENT_DISPLAY="${CURRENT_DISPLAY#bookverse-}"
          TARGET_DISPLAY="${{ inputs.target_stage }}"
          export CURRENT_DISPLAY TARGET_DISPLAY
          STAGES="DEV QA STAGING PROD"
          IFS=' ' read -r -a STAGE_ARR <<< "$STAGES"
          idx_current=-1; idx_target=-1
          for i in "${!STAGE_ARR[@]}"; do
            if [[ "${STAGE_ARR[$i]}" == "$CURRENT_DISPLAY" ]]; then idx_current=$i; fi
            if [[ "${STAGE_ARR[$i]}" == "$TARGET_DISPLAY" ]]; then idx_target=$i; fi
          done
          pre=""; post=""; sep=""
          if [[ $idx_current -ge 0 && $idx_target -ge 0 ]]; then
            for ((j=0;j<idx_current;j++)); do
              if [[ -n "$pre" ]]; then sep=" → "; else sep=""; fi
              pre+="$sep${STAGE_ARR[$j]}"
            done
            for ((j=idx_target+1;j<${#STAGE_ARR[@]};j++)); do
              if [[ -n "$post" ]]; then sep=" → "; else sep=""; fi
              post+="$sep${STAGE_ARR[$j]}"
            done
            LC_PATH="${pre:+$pre → }**${CURRENT_DISPLAY} ➔ ${TARGET_DISPLAY}**${post:+ → $post}"
          else
            LC_PATH="$STAGES"
          fi
          OUTCOME="SUCCESS"
          echo "### Executive Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Lifecycle:** UNASSIGNED → DEV → QA → STAGING → PROD" >> $GITHUB_STEP_SUMMARY
          echo "- **Application:** bookverse-platform" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${RESOLVED_VERSION:-${{ inputs.version }}}" >> $GITHUB_STEP_SUMMARY
          echo "- **From → To:** ${CURRENT_DISPLAY} → ${TARGET_DISPLAY}" >> $GITHUB_STEP_SUMMARY
          echo "- **Outcome:** ✅ ${OUTCOME}" >> $GITHUB_STEP_SUMMARY

